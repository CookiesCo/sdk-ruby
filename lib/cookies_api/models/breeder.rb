# cookies_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CookiesApi
  # Information about a Cookies in-house breeder or partner breeder.
  class Breeder < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique ID assigned to a breeder. Do not key against this: it is guaranteed
    # to change.
    # @return [String]
    attr_accessor :id

    # Unique slug assigned to a breeder. Typically assigned if there is no
    # linked brand. If a linked brand is present, this field takes precedence,
    # should any value be present.
    # @return [String]
    attr_accessor :slug

    # Naming info for a breeder. Typically assigned if there is no linked brand.
    # If a linked brand is present, this field takes precedence, should any
    # value be present.
    # @return [Name]
    attr_accessor :name

    # Brand associated with a breeder, if applicable.
    # @return [BrandSpec]
    attr_accessor :brand

    # Logo for a breeder, if available.
    # @return [MediaItem]
    attr_accessor :logo

    # Whether this breeder is considered "in-house".
    # @return [Boolean]
    attr_accessor :in_house

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['slug'] = 'slug'
      @_hash['name'] = 'name'
      @_hash['brand'] = 'brand'
      @_hash['logo'] = 'logo'
      @_hash['in_house'] = 'inHouse'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        slug
        name
        brand
        logo
        in_house
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(id = nil,
                   slug = nil,
                   name = nil,
                   brand = nil,
                   logo = nil,
                   in_house = nil)
      @id = id unless id == SKIP
      @slug = slug unless slug == SKIP
      @name = name unless name == SKIP
      @brand = brand unless brand == SKIP
      @logo = logo unless logo == SKIP
      @in_house = in_house unless in_house == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      slug = hash.key?('slug') ? hash['slug'] : SKIP
      name = Name.from_hash(hash['name']) if hash['name']
      brand = BrandSpec.from_hash(hash['brand']) if hash['brand']
      logo = MediaItem.from_hash(hash['logo']) if hash['logo']
      in_house = hash.key?('inHouse') ? hash['inHouse'] : SKIP

      # Create object from extracted values.
      Breeder.new(id,
                  slug,
                  name,
                  brand,
                  logo,
                  in_house)
    end
  end
end
