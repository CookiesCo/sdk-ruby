# cookies_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CookiesApi
  # Describes a Cookies strain.
  class Strain < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Unique ID assigned to this strain.
    # @return [String]
    attr_accessor :id

    # Unique URL slug assigned to this strain.
    # @return [String]
    attr_accessor :slug

    # Name of the strain.
    # @return [Name]
    attr_accessor :name

    # Brand info for the strain.
    # @return [BrandSpec]
    attr_accessor :brand

    # Species for the strain.
    # @return [SpeciesEnum]
    attr_accessor :species

    # Media assigned to a strain.
    # @return [StrainMedia]
    attr_accessor :media

    # Material info for a strain.
    # @return [MaterialInfo]
    attr_accessor :material

    # Breeder info for a strain.
    # @return [List of Breeder]
    attr_accessor :breeder

    # Whether a strain is visible.
    # @return [Boolean]
    attr_accessor :visible

    # Social information for a strain.
    # @return [StrainSocial]
    attr_accessor :social

    # Whether a strain is featured.
    # @return [Boolean]
    attr_accessor :featured

    # Whether a strain is exclusive to Cookies.
    # @return [Boolean]
    attr_accessor :exclusive

    # Theme information for a strain.
    # @return [Theme]
    attr_accessor :theme

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['slug'] = 'slug'
      @_hash['name'] = 'name'
      @_hash['brand'] = 'brand'
      @_hash['species'] = 'species'
      @_hash['media'] = 'media'
      @_hash['material'] = 'material'
      @_hash['breeder'] = 'breeder'
      @_hash['visible'] = 'visible'
      @_hash['social'] = 'social'
      @_hash['featured'] = 'featured'
      @_hash['exclusive'] = 'exclusive'
      @_hash['theme'] = 'theme'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        breeder
        visible
        social
        featured
        exclusive
        theme
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(id = nil,
                   slug = nil,
                   name = nil,
                   brand = nil,
                   species = nil,
                   media = nil,
                   material = nil,
                   breeder = nil,
                   visible = nil,
                   social = nil,
                   featured = nil,
                   exclusive = nil,
                   theme = nil)
      @id = id unless id == SKIP
      @slug = slug unless slug == SKIP
      @name = name unless name == SKIP
      @brand = brand unless brand == SKIP
      @species = species unless species == SKIP
      @media = media unless media == SKIP
      @material = material unless material == SKIP
      @breeder = breeder unless breeder == SKIP
      @visible = visible unless visible == SKIP
      @social = social unless social == SKIP
      @featured = featured unless featured == SKIP
      @exclusive = exclusive unless exclusive == SKIP
      @theme = theme unless theme == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      slug = hash.key?('slug') ? hash['slug'] : SKIP
      name = Name.from_hash(hash['name']) if hash['name']
      brand = BrandSpec.from_hash(hash['brand']) if hash['brand']
      species = hash.key?('species') ? hash['species'] : SKIP
      media = StrainMedia.from_hash(hash['media']) if hash['media']
      material = MaterialInfo.from_hash(hash['material']) if hash['material']
      # Parameter is an array, so we need to iterate through it
      breeder = nil
      unless hash['breeder'].nil?
        breeder = []
        hash['breeder'].each do |structure|
          breeder << (Breeder.from_hash(structure) if structure)
        end
      end

      breeder = SKIP unless hash.key?('breeder')
      visible = hash.key?('visible') ? hash['visible'] : SKIP
      social = StrainSocial.from_hash(hash['social']) if hash['social']
      featured = hash.key?('featured') ? hash['featured'] : SKIP
      exclusive = hash.key?('exclusive') ? hash['exclusive'] : SKIP
      theme = Theme.from_hash(hash['theme']) if hash['theme']

      # Create object from extracted values.
      Strain.new(id,
                 slug,
                 name,
                 brand,
                 species,
                 media,
                 material,
                 breeder,
                 visible,
                 social,
                 featured,
                 exclusive,
                 theme)
    end
  end
end
