# cookies_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CookiesApi
  # Photography and other media related to a first-party Cookies store.
  class StoreMedia < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Facade photography of a Cookies store.
    # @return [List of MediaItem]
    attr_accessor :facade

    # Inside photography of a Cookies store.
    # @return [List of MediaItem]
    attr_accessor :inside

    # Masthead (featured) photography for a Cookies store.
    # @return [List of MediaItem]
    attr_accessor :masthead

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['facade'] = 'facade'
      @_hash['inside'] = 'inside'
      @_hash['masthead'] = 'masthead'
      @_hash
    end

    # An array for optional fields
    def optionals
      []
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(facade = nil,
                   inside = nil,
                   masthead = nil)
      @facade = facade unless facade == SKIP
      @inside = inside unless inside == SKIP
      @masthead = masthead unless masthead == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      facade = nil
      unless hash['facade'].nil?
        facade = []
        hash['facade'].each do |structure|
          facade << (MediaItem.from_hash(structure) if structure)
        end
      end

      facade = SKIP unless hash.key?('facade')
      # Parameter is an array, so we need to iterate through it
      inside = nil
      unless hash['inside'].nil?
        inside = []
        hash['inside'].each do |structure|
          inside << (MediaItem.from_hash(structure) if structure)
        end
      end

      inside = SKIP unless hash.key?('inside')
      # Parameter is an array, so we need to iterate through it
      masthead = nil
      unless hash['masthead'].nil?
        masthead = []
        hash['masthead'].each do |structure|
          masthead << (MediaItem.from_hash(structure) if structure)
        end
      end

      masthead = SKIP unless hash.key?('masthead')

      # Create object from extracted values.
      StoreMedia.new(facade,
                     inside,
                     masthead)
    end
  end
end
