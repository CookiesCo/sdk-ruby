# cookies_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CookiesApi
  # Specifies a physical retail location owned or operated by Cookies, or
  # partnering with Cookies to sell products made by Cookies.
  class Store < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Describes unique key information for a retail store.
    # @return [StoreKey]
    attr_accessor :key

    # Specifies whether this retail location is live.
    # @return [Boolean]
    attr_accessor :live

    # Specifies the unique URL slug for this store.
    # @return [String]
    attr_accessor :slug

    # Specifies naming and labeling information for a Cookies store.
    # @return [Name]
    attr_accessor :name

    # Specifies the type for a retail store.
    # @return [StoreTypeEnum]
    attr_accessor :type

    # Specifies location information for a retail store.
    # @return [Location]
    attr_accessor :location

    # Specifies contact information for a retail store.
    # @return [Contact]
    attr_accessor :contact

    # Specifies documented capabilities at a retail store.
    # @return [List of StoreCapabilityEnum]
    attr_accessor :capability

    # Specifies regular and special hours for a retail store.
    # @return [Hours]
    attr_accessor :hours

    # Specifies social media accounts for a retail store.
    # @return [StoreSocial]
    attr_accessor :social

    # Specifies photography and other assets for a retail store.
    # @return [StoreMedia]
    attr_accessor :media

    # Specifies website and link information for a retail store.
    # @return [StoreWeb]
    attr_accessor :web

    # Specifies branding information for a retail store.
    # @return [StoreBranding]
    attr_accessor :branding

    # Specifies online ordering information for a retail store.
    # @return [StoreOrdering]
    attr_accessor :ordering

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['key'] = 'key'
      @_hash['live'] = 'live'
      @_hash['slug'] = 'slug'
      @_hash['name'] = 'name'
      @_hash['type'] = 'type'
      @_hash['location'] = 'location'
      @_hash['contact'] = 'contact'
      @_hash['capability'] = 'capability'
      @_hash['hours'] = 'hours'
      @_hash['social'] = 'social'
      @_hash['media'] = 'media'
      @_hash['web'] = 'web'
      @_hash['branding'] = 'branding'
      @_hash['ordering'] = 'ordering'
      @_hash
    end

    # An array for optional fields
    def optionals
      []
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(key = nil,
                   live = nil,
                   slug = nil,
                   name = nil,
                   type = nil,
                   location = nil,
                   contact = nil,
                   capability = nil,
                   hours = nil,
                   social = nil,
                   media = nil,
                   web = nil,
                   branding = nil,
                   ordering = nil)
      @key = key unless key == SKIP
      @live = live unless live == SKIP
      @slug = slug unless slug == SKIP
      @name = name unless name == SKIP
      @type = type unless type == SKIP
      @location = location unless location == SKIP
      @contact = contact unless contact == SKIP
      @capability = capability unless capability == SKIP
      @hours = hours unless hours == SKIP
      @social = social unless social == SKIP
      @media = media unless media == SKIP
      @web = web unless web == SKIP
      @branding = branding unless branding == SKIP
      @ordering = ordering unless ordering == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      key = StoreKey.from_hash(hash['key']) if hash['key']
      live = hash.key?('live') ? hash['live'] : SKIP
      slug = hash.key?('slug') ? hash['slug'] : SKIP
      name = Name.from_hash(hash['name']) if hash['name']
      type = hash.key?('type') ? hash['type'] : SKIP
      location = Location.from_hash(hash['location']) if hash['location']
      contact = Contact.from_hash(hash['contact']) if hash['contact']
      capability = hash.key?('capability') ? hash['capability'] : SKIP
      hours = Hours.from_hash(hash['hours']) if hash['hours']
      social = StoreSocial.from_hash(hash['social']) if hash['social']
      media = StoreMedia.from_hash(hash['media']) if hash['media']
      web = StoreWeb.from_hash(hash['web']) if hash['web']
      branding = StoreBranding.from_hash(hash['branding']) if hash['branding']
      ordering = StoreOrdering.from_hash(hash['ordering']) if hash['ordering']

      # Create object from extracted values.
      Store.new(key,
                live,
                slug,
                name,
                type,
                location,
                contact,
                capability,
                hours,
                social,
                media,
                web,
                branding,
                ordering)
    end
  end
end
