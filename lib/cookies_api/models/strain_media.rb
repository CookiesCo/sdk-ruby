# cookies_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CookiesApi
  # Specifies media/assets attached to a Cookies strain.
  class StrainMedia < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Artwork imagery for a strain.
    # @return [DualFormatGraphic]
    attr_accessor :artwork

    # Headshot images for a strain.
    # @return [MediaItem]
    attr_accessor :head

    # Packaging photography for a strain.
    # @return [MediaItem]
    attr_accessor :packaging

    # Material photography for a strain.
    # @return [List of MediaItem]
    attr_accessor :material

    # Lockup artwork for a strain.
    # @return [DualFormatGraphic]
    attr_accessor :lockup

    # Card artwork for a strain.
    # @return [MediaItem]
    attr_accessor :card

    # Menu artwork for a strain.
    # @return [MediaItem]
    attr_accessor :menu

    # Macro flower photography for a strain.
    # @return [List of MediaItem]
    attr_accessor :macro

    # Late-stage cultivation photography for a strain.
    # @return [List of MediaItem]
    attr_accessor :cultivation

    # Lifestyle photography associated with a strain.
    # @return [List of MediaItem]
    attr_accessor :lifestyle

    # Tile graphic associated with a strain.
    # @return [MediaItem]
    attr_accessor :tile

    # Masthead images associated with a strain.
    # @return [ResponsiveGraphic]
    attr_accessor :masthead

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['artwork'] = 'artwork'
      @_hash['head'] = 'head'
      @_hash['packaging'] = 'packaging'
      @_hash['material'] = 'material'
      @_hash['lockup'] = 'lockup'
      @_hash['card'] = 'card'
      @_hash['menu'] = 'menu'
      @_hash['macro'] = 'macro'
      @_hash['cultivation'] = 'cultivation'
      @_hash['lifestyle'] = 'lifestyle'
      @_hash['tile'] = 'tile'
      @_hash['masthead'] = 'masthead'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        artwork
        head
        packaging
        material
        lockup
        card
        menu
        macro
        cultivation
        lifestyle
        tile
        masthead
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(artwork = nil,
                   head = nil,
                   packaging = nil,
                   material = nil,
                   lockup = nil,
                   card = nil,
                   menu = nil,
                   macro = nil,
                   cultivation = nil,
                   lifestyle = nil,
                   tile = nil,
                   masthead = nil)
      @artwork = artwork unless artwork == SKIP
      @head = head unless head == SKIP
      @packaging = packaging unless packaging == SKIP
      @material = material unless material == SKIP
      @lockup = lockup unless lockup == SKIP
      @card = card unless card == SKIP
      @menu = menu unless menu == SKIP
      @macro = macro unless macro == SKIP
      @cultivation = cultivation unless cultivation == SKIP
      @lifestyle = lifestyle unless lifestyle == SKIP
      @tile = tile unless tile == SKIP
      @masthead = masthead unless masthead == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      artwork = DualFormatGraphic.from_hash(hash['artwork']) if hash['artwork']
      head = MediaItem.from_hash(hash['head']) if hash['head']
      packaging = MediaItem.from_hash(hash['packaging']) if hash['packaging']
      # Parameter is an array, so we need to iterate through it
      material = nil
      unless hash['material'].nil?
        material = []
        hash['material'].each do |structure|
          material << (MediaItem.from_hash(structure) if structure)
        end
      end

      material = SKIP unless hash.key?('material')
      lockup = DualFormatGraphic.from_hash(hash['lockup']) if hash['lockup']
      card = MediaItem.from_hash(hash['card']) if hash['card']
      menu = MediaItem.from_hash(hash['menu']) if hash['menu']
      # Parameter is an array, so we need to iterate through it
      macro = nil
      unless hash['macro'].nil?
        macro = []
        hash['macro'].each do |structure|
          macro << (MediaItem.from_hash(structure) if structure)
        end
      end

      macro = SKIP unless hash.key?('macro')
      # Parameter is an array, so we need to iterate through it
      cultivation = nil
      unless hash['cultivation'].nil?
        cultivation = []
        hash['cultivation'].each do |structure|
          cultivation << (MediaItem.from_hash(structure) if structure)
        end
      end

      cultivation = SKIP unless hash.key?('cultivation')
      # Parameter is an array, so we need to iterate through it
      lifestyle = nil
      unless hash['lifestyle'].nil?
        lifestyle = []
        hash['lifestyle'].each do |structure|
          lifestyle << (MediaItem.from_hash(structure) if structure)
        end
      end

      lifestyle = SKIP unless hash.key?('lifestyle')
      tile = MediaItem.from_hash(hash['tile']) if hash['tile']
      masthead = ResponsiveGraphic.from_hash(hash['masthead']) if hash['masthead']

      # Create object from extracted values.
      StrainMedia.new(artwork,
                      head,
                      packaging,
                      material,
                      lockup,
                      card,
                      menu,
                      macro,
                      cultivation,
                      lifestyle,
                      tile,
                      masthead)
    end
  end
end
